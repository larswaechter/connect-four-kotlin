/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package connect.four

fun main() {

    Server()

    return

    train()

    /*

    val a = 100_000F + 10 * 2
    val b = 100_000F
    println(a)
    println(b)
    println(a > b)

    return

     */


/*

    var game = ConnectFour(
            difficulty = 5,
            currentPlayer = -1,
            board = longArrayOf(
                    0b0_0000000_0000000___0001000_0000000_0000000_0000011_0000000_0000111_0000111, // X = player 1 (red)
                    0b0_0000000_0000000___0000111_0000001_0000001_0000000_0000011_0000000_0001000
            )
    )

    println(game.hasWinner())
    println(game.bestMove())

 */



    /*

    var game = C4()
    game = game.move(6)
    game = game.move(6)
    game = game.move(6)
    game = game.move(6)
    game = game.move(6)
    game = game.move(6)

    println(game)

    println(C4.calcZobristHash(game.board))


    var game2 = C4(board = longArrayOf(game.mirror(game.board[0]), game.mirror(game.board[1])))
    println(game2)

     */


    /*

    val board00 = Array(7) { IntArray(6) }
    board00[0][1] = 1

    val board11 = Array(7) { IntArray(6) }
    board11[0][1] = 1

    println(board00.contentHashCode())
    println(board11.contentHashCode())

    return

     */


    /*

    val board1 = Array(7) { IntArray(6) }
    board1[4][5] = -1
    board1[6][5] = -1
    board1[6][4] = -1
    println(board1.contentDeepHashCode())
    println(board1.contentDeepToString().hashCode())
    println(ConnectFour(board1))

    val board2 = Array(7) { IntArray(6) }
    board2[6][5] = -1
    board2[6][4] = -1
    board2[6][3] = -1
    println(board2.contentDeepHashCode())
    println(board2.contentDeepToString().hashCode())
    println(ConnectFour(board2))

    return

     */


    /*

    return

    Server()

    return

    var game = ConnectFour()

    game = game.move(Move(0))
    game = game.move(Move(0))
    game = game.move(Move(0))
    game = game.move(Move(0))

    game = game.undoMove(0)
    game = game.undoMove(2)

    println(game)

    println(game.getNumberOfPlayedMoves())

    // Minimax.Storage.seedByMovesPlayed<Move>(5000, 40)

     */

    /*

    val game = ConnectFour.playRandomMoves(28)

    println(game.currentPlayer)
    println(game)

    println(game.minimax())

     */

    // Minimax.Storage.seedByMovesPlayed(5000, 40)

    // val bestMove = ConnectFour.playRandomMoves(40).mcm()


    // Server()

    // train()


    // Minimax.Storage.seedByMovesPlayed(5, 40)
    // Minimax.Storage.seedByMovesPlayed(2000, 40)


    // println(ConnectFour(difficulty = 42).bestMove())

    /*

    val start = System.currentTimeMillis()

    val game = ConnectFour.playRandomMoves(1)
    println(game.bestMove())
    println((System.currentTimeMillis() - start) / 1000)

     */


}

fun train() {
    for (i in 27 downTo 7) {
        for (k in 1..5) Minimax.Storage.seedByMovesPlayed<Move>(500, i)
    }
}

fun playGame() {
    var game = ConnectFour()

    while (!game.isGameOver()) {
        println(game)
        print("Enter move: ")

        val move = Move(readLine()!!.toInt())
        game = game.move(move)

        if (game.isGameOver()) break
        game = game.bestMove()
    }

    println(game)
}