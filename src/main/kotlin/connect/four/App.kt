/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package connect.four

import io.javalin.Javalin

class App {
    init {
        var game = ConnectFour()

        val app = Javalin.create { config ->
            config.addStaticFiles("/public")
        }.start(7070)

        app.get("/game") {ctx ->
            ctx.html(game.toHTML())
        }

        app.get("/move/:column") {ctx ->
            val paramColumn = ctx.pathParam("column")

            // Validate parameter
            if(paramColumn.matches(Regex("^[0-6]\$"))) {
                val column = paramColumn.toInt()
                game = game.move(Move(column))

                if(game.hasWinner()) {
                    ctx.html(game.toHTML())
                } else if(game.getNumberOfRemainingMoves() == 0) {
                    ctx.html(game.toHTML())
                } else {
                    ctx.html(game.toHTML())
                }
            }
        }
    }
}


fun main() {

    App()

    // train()


    // Minimax.Storage.seedByMovesPlayed(2000, 40)
    // Minimax.Storage.seedByMovesPlayed(2000, 40)


    // println(ConnectFour(difficulty = 42).bestMove())

    /*

    val start = System.currentTimeMillis()

    val game = ConnectFour.playRandomMoves(1)
    println(game.bestMove())
    println((System.currentTimeMillis() - start) / 1000)

     */


}

fun train() {
    for (i in 3 downTo 1) {
        for (k in 1..3) Minimax.Storage.seedByMovesPlayed(2500, i)
    }
}

fun playGame() {
    var game = ConnectFour(difficulty = 4)

    while (!game.isGameOver()) {
        println(game)
        print("Enter move: ")

        val move = Move(readLine()!!.toInt())
        game = game.move(move)

        if(game.isGameOver()) break
        game = game.bestMove()
    }

    println(game)
}