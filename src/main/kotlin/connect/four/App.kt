/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package connect.four


fun main() {

    // val game = ConnectFour(difficulty = 15)
    // println(game.bestMove())

    playGame()

    /*
    for(i in 9 downTo 1) {
        for(k in 1..3) Minimax.Storage.feedByMovesPlayed(5000, i)
    }

     */

    /*

    val game = ConnectFour(currentPlayer = -1)
    game.board[0][5] = 1
    game.board[0][4] = -1
    game.board[1][5] = 1
    game.board[2][5] = 1
    game.board[5][5] = -1

    // println(game)
    // println(game.getBestMove())

    val game2 = ConnectFour(board = game.board.mirrorYAxis(), currentPlayer = -1)
    println(game2)
    println(game2.getBestMove())

     */

    return

    playGame()
    return

    /*

    val game = ConnectFour.playRandomMoves(40)
    println(game)


    println(game.getBestMove())

    return
    playGame()
    return

     */

    /*
    val game = ConnectFour()

    game.board[0][5] = 1
    game.board[0][4] = 1

    println(game.bestMove())

     */

    // Minimax.Storage.feedByMovesPlayed(1, 34)


    // Storage.feedByMovesPlayed(10000, 15)
    // println(Storage.doStorageLookup(4).map.size)

    // Minimax.Storage.feedByMovesPlayed(10000, 15)
    // println(Minimax.Storage.doStorageLookup(4).map.size)

    // val game = ConnectFour().playRandomMoves(15)

    /*

    val game = ConnectFour.playRandomMoves(10)
    val invGame = ConnectFour(board = game.board.inverseMatrix())

    println(game)
    game.getStorageRecordKeys().forEach { println(it) }
    println()
    println(invGame)
    invGame.getStorageRecordKeys().forEach { println(it) }

     */
}

fun playGame() {
    var game = ConnectFour(difficulty = 15)
    while (!game.isGameOver()) {
        println(game)
        print("Enter move: ")
        game = game.move(Move(readLine()!!.toInt()))
        if(game.isGameOver()) break
        game = game.bestMove()
    }
    println(game)
}